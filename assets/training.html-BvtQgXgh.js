import{_ as t}from"./training-7gW2xCWP.js";import{_ as a,c as o,b as i,o as n}from"./app-B7Tbplas.js";const r="/ommr4all/assets/progress-Bj0j57d2.png",s={};function l(m,e){return n(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="training-new-models" tabindex="-1"><a class="header-anchor" href="#training-new-models"><span>Training new models</span></a></h1><p>As already mentioned, OMMR4all also offers an iterative training workflow. This means that data that has been corrected/annotated can be used for training.</p><p>To do this, you need to switch to the training view. For each step of the pipeline, there is a separate subsection with which models can be trained. <img src="'+t+'" alt="Automatic Symbol Detection"></p><p>The configuration for training is simple. The following parameters can be set:</p><ul><li>Fine-tuning and selection of a model</li><li>Selection of training materials (only data from the book, or also data from other books)</li></ul><p>OMMR4all only uses data that has been marked as corrected. This means that if new symbol recognition models are to be trained, only pages with a green box in the page overview will be used. (For layout, it is sufficient if the L box is green; for symbols, the s box must be green).</p><p><img src="'+r+'" alt="Automatic Symbol Detection"></p><p>After training the model can be selected from the drop-down list (<strong>Newest Model</strong>)</p>',8)])])}const h=a(s,[["render",l]]),g=JSON.parse('{"path":"/guide/workflow/training.html","title":"Training new models","lang":"en-US","frontmatter":{},"git":{"updatedTime":1756753822000,"contributors":[{"name":"Alexander Hartelt","username":"","email":"hartelt.alexander@gmail.com","commits":1}],"changelog":[{"hash":"9a4aa5edd0a4b87ba3178aaaf3ebd7d3fe39cfdc","time":1756753822000,"email":"hartelt.alexander@gmail.com","author":"Alexander Hartelt","message":"inital commit v2"}]},"filePathRelative":"guide/workflow/training.md"}');export{h as comp,g as data};
